""""""
type Viewer {
  """"""
  id: ID @deprecated(reason: "Use `user` for id instead.")

  """"""
  email: String @deprecated(reason: "Use `user` for email instead.")

  """"""
  status: UserStatus @deprecated(reason: "Use `user` for status instead.")

  """"""
  name: String @deprecated(reason: "Use `user` for name instead.")

  """"""
  roles: [Role!] @deprecated(reason: "Use `user` for roles instead.")

  """"""
  user: User

  """"""
  merchant: Merchant
}

""""""
type User {
  """"""
  id: ID!

  """"""
  email: String

  """"""
  status: UserStatus

  """"""
  name: String

  """"""
  roles: [Role!]
}

""""""
type Role {
  """"""
  id: ID!

  """"""
  name: String

  """"""
  isAccountAdmin: Boolean

  """"""
  rights: [Right!]
}

""""""
type Right {
  """"""
  name: String
}

""""""
type Merchant {
  """"""
  id: ID!

  """"""
  status: String

  """"""
  companyName: String

  """"""
  website: String

  """"""
  timezone: String
}

""""""
type CreateClientTokenPayload {
  """An identifier used to reconcile requests and responses. Making an edit here."""
  clientMutationId: String

  """"""
  clientToken: String
}

""""""
type ClientConfiguration {
  """"""
  analyticsUrl: String @deprecated(reason: "This field is included for supporting SDKs that send analytics.")

  """"""
  applePay: ApplePayConfiguration

  """"""
  applePayWeb: ApplePayWebConfiguration

  """"""
  assetsUrl: String

  """"""
  clientApiUrl: String @deprecated(reason: "This field is included for supporting legacy clients.")

  """"""
  supportedFeatures: [ClientFeature] @legacyEnum @deprecated(reason: "This field is included for supporting legacy clients.")

  """"""
  braintreeApi: BraintreeApiConfiguration @deprecated(reason: "This field is included for supporting legacy clients.")

  """"""
  creditCard: CreditCardConfiguration

  """"""
  environment: ClientConfigurationEnvironment @legacyEnum

  """"""
  googlePay: GooglePayConfiguration

  """"""
  ideal: IDealConfiguration @deprecated(reason: "This field is included for supporting legacy clients.")

  """"""
  kount: KountConfiguration

  """"""
  masterpass: MasterpassConfiguration

  """"""
  merchantId: String

  """"""
  paypal: PayPalConfiguration

  """"""
  samsungPay: SamsungPayConfiguration

  """"""
  unionPay: UnionPayConfiguration

  """"""
  usBankAccount: UsBankAccountConfiguration

  """"""
  venmo: VenmoConfiguration

  """"""
  visaCheckout: VisaCheckoutConfiguration
}

""""""
type Report {
  """"""
  transactionLevelFees(date: Date!, merchantAccountId: ID): TransactionLevelFeeReport @complexity(amount: 10)
}

""""""
type TransactionLevelFeeReport {
  """"""
  url: String
}

""""""
type ApplePayConfiguration {
  """"""
  status: ApplePayStatus @legacyEnum

  """"""
  countryCode: CountryCodeAlpha2

  """"""
  currencyCode: CurrencyCodeAlpha

  """"""
  merchantIdentifier: String

  """"""
  supportedCardBrands: [CreditCardBrandCode] @legacyEnum
}

""""""
type ApplePayWebConfiguration {
  """"""
  countryCode: CountryCodeAlpha2

  """"""
  currencyCode: CurrencyCodeAlpha

  """"""
  merchantIdentifier: String

  """"""
  supportedCardBrands: [CreditCardBrandCode] @legacyEnum
}

""""""
type BraintreeApiConfiguration {
  """"""
  url: String

  """"""
  accessToken: String
}

""""""
type CreditCardConfiguration {
  """"""
  supportedCardBrands: [CreditCardBrandCode] @legacyEnum

  """"""
  challenges: [Challenge] @legacyEnum

  """"""
  threeDSecureEnabled: Boolean @deprecated(reason: "Use `threeDSecure` instead.")

  """"""
  threeDSecure: ThreeDSecureConfiguration

  """"""
  fraudDataCollectionEnabled: Boolean
}

""""""
type GooglePayConfiguration {
  """"""
  displayName: String

  """"""
  environment: GooglePayEnvironment @legacyEnum

  """"""
  googleAuthorization: String @deprecated(reason: "This field is included for supporting legacy clients.")

  """"""
  paypalClientId: String

  """"""
  supportedCardBrands: [CreditCardBrandCode] @legacyEnum
}

""""""
type KountConfiguration {
  """"""
  merchantId: String
}

""""""
type IDealConfiguration {
  """"""
  routeId: String

  """"""
  assetsUrl: String
}

""""""
type MasterpassConfiguration {
  """"""
  merchantCheckoutId: String

  """"""
  supportedCardBrands: [CreditCardBrandCode] @legacyEnum
}

""""""
type PayPalConfiguration {
  """"""
  displayName: String

  """"""
  clientId: String

  """"""
  privacyUrl: String

  """"""
  userAgreementUrl: String

  """"""
  assetsUrl: String

  """"""
  environment: PayPalEnvironment @legacyEnum

  """"""
  environmentNoNetwork: Boolean @deprecated(reason: "This field is only included for internal testing purposes.")

  """"""
  unvettedMerchant: Boolean

  """"""
  braintreeClientId: String

  """"""
  billingAgreementsEnabled: Boolean

  """"""
  merchantAccountId: String

  """"""
  currencyCode: CurrencyCodeAlpha

  """"""
  payeeEmail: String

  """"""
  directBaseUrl: String @deprecated(reason: "This field is only included for internal testing purposes.")
}

""""""
type SamsungPayConfiguration {
  """"""
  displayName: String

  """"""
  environment: SamsungPayEnvironment

  """"""
  serviceId: String

  """"""
  samsungAuthorization: String

  """"""
  supportedCardBrands: [CreditCardBrandCode] @legacyEnum
}

""""""
type UnionPayConfiguration {
  """"""
  merchantAccountId: String
}

""""""
type UsBankAccountConfiguration {
  """"""
  routeId: String

  """"""
  plaidPublicKey: String
}

""""""
type VenmoConfiguration {
  """"""
  merchantId: String

  """"""
  accessToken: String

  """"""
  environment: VenmoEnvironment @legacyEnum
}

""""""
type VisaCheckoutConfiguration {
  """"""
  apiKey: String

  """"""
  externalClientId: String

  """"""
  supportedCardBrands: [CreditCardBrandCode] @legacyEnum
}

""""""
type TokenizeCustomActionsPaymentMethodPayload {
  """An identifier used to reconcile requests and responses. Making an edit here."""
  clientMutationId: String

  """"""
  paymentMethod: PaymentMethod
}

""""""
type TokenizeCvvPayload {
  """An identifier used to reconcile requests and responses. Making an edit here."""
  clientMutationId: String

  """"""
  singleUseToken: PaymentMethod
}

""""""
type TokenizeCreditCardPayload {
  """An identifier used to reconcile requests and responses. Making an edit here."""
  clientMutationId: String

  """"""
  token: String @deprecated(reason: "Use `paymentMethod.id` instead.")

  """"""
  creditCard: CreditCardDetails @deprecated(reason: "Use `paymentMethod.details` instead.")

  """"""
  singleUseToken: PaymentMethod @deprecated(reason: "Use `paymentMethod` instead.")

  """"""
  paymentMethod: PaymentMethod

  """"""
  authenticationInsight(input: AuthenticationInsightInput!): AuthenticationInsight @complexity(amount: 20)
}

""""""
type TokenizeNetworkTokenPayload {
  """An identifier used to reconcile requests and responses. Making an edit here."""
  clientMutationId: String

  """"""
  paymentMethod: PaymentMethod
}

""""""
type TokenizeSamsungPayCardPayload {
  """An identifier used to reconcile requests and responses. Making an edit here."""
  clientMutationId: String

  """"""
  singleUseToken: PaymentMethod @deprecated(reason: "Use `paymentMethod` instead.")

  """"""
  paymentMethod: PaymentMethod
}

""""""
type TokenizeUsBankAccountPayload {
  """An identifier used to reconcile requests and responses. Making an edit here."""
  clientMutationId: String

  """"""
  paymentMethod: PaymentMethod
}

""""""
type CustomActionsPaymentMethodDetails {
  """"""
  actionName: String

  """Fields that your action requires."""
  fields: [CustomActionsPaymentMethodField!]
}

"""Fields that are provided during tokenization and are presented to the invoked action to be consumed."""
type CustomActionsPaymentMethodField {
  """"""
  name: String

  """"""
  displayValue: String
}

""""""
type CreditCardDetails {
  """"""
  brandCode: CreditCardBrandCode @legacyEnum

  """"""
  brand: String @deprecated(reason: "Use `brandCode` instead.")

  """"""
  last4: String

  """"""
  bin: String

  """"""
  binData: BinRecord @complexity(amount: 10)

  """"""
  expirationMonth: String

  """"""
  expirationYear: String

  """"""
  imageUrl: String @deprecated(reason: "This field is included for supporting legacy clients.")

  """"""
  cardholderName: String

  """"""
  uniqueNumberIdentifier: String

  """"""
  origin: PaymentMethodOrigin

  """"""
  threeDSecure: ThreeDSecureAuthentication
}

""""""
type VerificationConnection {
  """"""
  edges: [VerificationConnectionEdge],

  """"""
  pageInfo: PageInfo!
}

""""""
type VerificationConnectionEdge {
  """"""
  cursor: String

  """"""
  node: Verification
}

""""""
type PaymentMethodOrigin {
  """"""
  type: PaymentMethodOriginType

  """"""
  details: PaymentMethodOriginDetails
}

""""""
type ApplePayOriginDetails {
  """"""
  paymentInstrumentName: String

  """"""
  bin: String
}

""""""
type GooglePayOriginDetails {
  """"""
  googleTransactionId: String

  """"""
  bin: String
}

""""""
type MasterpassOriginDetails {
  """"""
  bin: String
}

""""""
type NetworkTokenOriginDetails {
  """"""
  bin: String
}

""""""
type SamsungPayOriginDetails {
  """"""
  bin: String
}

""""""
type VisaCheckoutOriginDetails {
  """"""
  callId: String

  """"""
  bin: String
}

""""""
type SamsungPayCardDetails {
  """"""
  brand: String

  """"""
  brandCode: CreditCardBrandCode @legacyEnum

  """"""
  bin: String

  """"""
  binData: BinRecord @complexity(amount: 10)

  """"""
  sourceCardLast4: CreditCardLast4
}

""""""
type PayPalAccountDetails {
  """"""
  billingAgreementId: String

  """"""
  email: String

  """"""
  payerId: String

  """"""
  firstName: String

  """"""
  lastName: String
}

""""""
type PayPalTransactionDetails {
  """"""
  authorizationId: String

  """"""
  captureId: String

  """"""
  customField: String

  """"""
  payer: PayPalAccountDetails

  """"""
  payee: PayPalAccountDetails

  """"""
  payerStatus: String

  """"""
  paymentId: String

  """"""
  refundId: String

  """"""
  sellerProtectionStatus: String

  """"""
  taxId: String

  """"""
  taxIdType: String

  """"""
  transactionFee: MonetaryAmount

  """"""
  transactionFeeAmount: String @deprecated(reason: "Use `transactionFee.value` instead.")

  """"""
  transactionFeeCurrencyIsoCode: String @deprecated(reason: "Use `transactionFee.currencyIsoCode` instead.")

  """Description of the transaction that is displayed to customers in PayPal email receipts."""
  description: String
}

""""""
type VenmoAccountDetails {
  """"""
  username: String

  """"""
  venmoUserId: String
}

""""""
type BinRecord {
  """"""
  prepaid: BinRecordValue @legacyEnum(capitalize: true)

  """"""
  healthcare: BinRecordValue @legacyEnum(capitalize: true)

  """"""
  debit: BinRecordValue @legacyEnum(capitalize: true)

  """"""
  durbinRegulated: BinRecordValue @legacyEnum(capitalize: true)

  """"""
  commercial: BinRecordValue @legacyEnum(capitalize: true)

  """"""
  payroll: BinRecordValue @legacyEnum(capitalize: true)

  """"""
  issuingBank: String

  """"""
  countryOfIssuance: CountryCodeAlpha3

  """"""
  productId: String
}

""""""
type PaymentMethod implements Node {
  """"""
  id: ID!

  """"""
  legacyId: ID!

  """"""
  usage: PaymentMethodUsage

  """"""
  createdAt: Timestamp

  """"""
  details: PaymentMethodDetails

  """"""
  verifications(first: Int, after: String): VerificationConnection

  """"""
  customer: Customer
}

""""""
type DeletePaymentMethodFromVaultPayload {
  """An identifier used to reconcile requests and responses. Making an edit here."""
  clientMutationId: String
}

""""""
type DeletePaymentMethodFromSingleUseTokenPayload {
  """An identifier used to reconcile requests and responses. Making an edit here."""
  clientMutationId: String
}

""""""
type DeleteCustomerPayload {
  """An identifier used to reconcile requests and responses. Making an edit here."""
  clientMutationId: String
}

""""""
type PartialCaptureTransactionPayload {
  """An identifier used to reconcile requests and responses. Making an edit here."""
  clientMutationId: String

  """"""
  capture: Transaction
}

""""""
type TransactionPayload {
  """An identifier used to reconcile requests and responses. Making an edit here."""
  clientMutationId: String

  """"""
  transaction: Transaction
}

""""""
type UpdateTransactionCustomFieldsPayload {
  """An identifier used to reconcile requests and responses. Making an edit here."""
  clientMutationId: String

  """"""
  customFields: [CustomField!]
}

""""""
type ThreeDSecureConfiguration {
  """"""
  cardinalAuthenticationJWT: String
}

""""""
type Transaction implements Node {
  """"""
  id: ID!

  """"""
  legacyId: ID!

  """"""
  createdAt: Timestamp

  """"""
  paymentMethodSnapshot: PaymentMethodSnapshot

  """"""
  paymentMethod: PaymentMethod

  """"""
  amount: MonetaryAmount

  """"""
  customFields: [CustomField!]

  """"""
  merchantAccountId: ID

  """"""
  orderId: String

  """"""
  purchaseOrderNumber: String

  """"""
  status: TransactionStatus

  """"""
  processorResponse: TransactionAuthorizationProcessorResponse @deprecated(reason: "Use relevant events in `statusEvents` instead.")

  """"""
  riskData: RiskData

  """"""
  descriptor: TransactionDescriptor

  """"""
  statusHistory: [TransactionStatusEvent!]

  """"""
  channel: String

  """"""
  source: TransactionSource

  """"""
  customer: Customer @complexity(amount: 10)

  """"""
  shipping: TransactionShipping

  """"""
  tax: TransactionTaxInformation

  """"""
  discountAmount: String

  """"""
  lineItems: [TransactionLineItem!] @complexity(amount: 10)

  """"""
  refunds: [Refund!] @complexity(amount: 10)

  """"""
  partialCaptureDetails: PartialCaptureDetails

  """"""
  disputes: [Dispute!]

  """"""
  facilitatorDetails: FacilitatorDetails
}

""""""
type FacilitatorDetails {
  """"""
  oauthApplication: OAuthApplication
}

""""""
type OAuthApplication {
  """"""
  clientId: String
}

""""""
type ChildCapture {
  """"""
  parentAuthorization: Transaction @complexity(amount: 10)
}

""""""
type ParentAuthorization {
  """"""
  childCaptures: [Transaction!] @complexity(amount: 10)

  """"""
  totalAmountAuthorized: MonetaryAmount
}

"""Fields used to define what will appear on a customer's bank statement for a specific purchase."""
type TransactionDescriptor {
  """The value in the business name field of a customer's statement."""
  name: String

  """The value in the phone number field of a customer's statement."""
  phone: String

  """The value in the URL/web address field of a customer's statement."""
  url: String
}

""""""
type TransactionAuthorizationProcessorResponse {
  """"""
  legacyCode: String

  """"""
  message: String

  """"""
  cvvResponse: AvsCvvResponseCode

  """"""
  avsPostalCodeResponse: AvsCvvResponseCode

  """"""
  avsStreetAddressResponse: AvsCvvResponseCode

  """"""
  authorizationId: String
}

""""""
type TransactionSettlementProcessorResponse {
  """"""
  legacyCode: String

  """"""
  message: String

  """"""
  cvvResponse: AvsCvvResponseCode @deprecated(reason: "AVS and CVV checks do not take place when capturing a transaction, only when authorizing. Use the `processorResponse` on an authorization-related `TransactionStatusEvent` instead.")

  """"""
  avsPostalCodeResponse: AvsCvvResponseCode @deprecated(reason: "AVS and CVV checks do not take place when capturing a transaction, only when authorizing. Use the `processorResponse` on an authorization-related `TransactionStatusEvent` instead.")

  """"""
  avsStreetAddressResponse: AvsCvvResponseCode @deprecated(reason: "AVS and CVV checks do not take place when capturing a transaction, only when authorizing. Use the `processorResponse` on an authorization-related `TransactionStatusEvent` instead.")
}

""""""
type RiskData {
  """"""
  id: ID

  """"""
  decision: RiskDecision

  """"""
  deviceDataCaptured: Boolean

  """"""
  fraudServiceProvider: FraudServiceProvider
}

""""""
type CustomField {
  """"""
  name: String

  """"""
  value: String
}

""""""
type Address {
  """"""
  company: String

  """The street address."""
  streetAddress: String

  """"""
  extendedAddress: String

  """"""
  firstName: String

  """"""
  lastName: String

  """"""
  locality: String

  """"""
  region: String

  """"""
  postalCode: String

  """"""
  countryCode: CountryCodeAlpha3
}

"""Information related to shipping a physical product."""
type TransactionShipping {
  """"""
  shippingAddress: Address

  """"""
  shippingAmount: Amount

  """"""
  shipsFromPostalCode: String
}

"""Information related to taxes on the transaction."""
type TransactionTaxInformation {
  """"""
  taxAmount: Amount

  """"""
  taxExempt: Boolean
}

"""Data for individual line items on a transaction."""
type TransactionLineItem {
  """"""
  name: String

  """"""
  kind: TransactionLineItemType

  """"""
  quantity: String

  """"""
  unitAmount: String

  """"""
  totalAmount: String

  """"""
  unitTaxAmount: String

  """"""
  taxAmount: String

  """"""
  discountAmount: String

  """"""
  unitOfMeasure: String

  """"""
  productCode: String

  """"""
  commodityCode: String

  """"""
  description: String

  """"""
  url: String
}

""""""
type UsBankAccountDetails {
  """"""
  accountholderName: String

  """"""
  accountType: UsBankAccountType

  """"""
  ownershipType: UsBankAccountOwnershipType

  """"""
  bankName: String

  """"""
  last4: String

  """"""
  routingNumber: String

  """"""
  verified: Boolean
}

""""""
type VaultPaymentMethodPayload {
  """An identifier used to reconcile requests and responses. Making an edit here."""
  clientMutationId: String

  """"""
  paymentMethod: PaymentMethod

  """"""
  verification: Verification
}

""""""
type ConfirmMicroTransferAmountsPayload {
  """An identifier used to reconcile requests and responses. Making an edit here."""
  clientMutationId: String

  """"""
  verification: Verification

  """"""
  status: ConfirmMicroTransferAmountsStatus
}

""""""
type VerifyPaymentMethodPayload {
  """An identifier used to reconcile requests and responses. Making an edit here."""
  clientMutationId: String

  """"""
  verification: Verification
}

""""""
type RefundTransactionPayload {
  """An identifier used to reconcile requests and responses. Making an edit here."""
  clientMutationId: String

  """"""
  refund: Refund
}

""""""
type Refund implements Node {
  """"""
  id: ID!

  """"""
  legacyId: ID!

  """"""
  createdAt: Timestamp

  """"""
  amount: MonetaryAmount

  """"""
  orderId: String

  """"""
  status: TransactionStatus

  """"""
  statusHistory: [TransactionStatusEvent!]

  """"""
  refundedTransaction: Transaction
}

""""""
type ReverseTransactionPayload {
  """An identifier used to reconcile requests and responses. Making an edit here."""
  clientMutationId: String

  """"""
  reversal: TransactionReversal
}

""""""
type MonetaryAmount {
  """"""
  value: Amount

  """"""
  currencyIsoCode: CurrencyCodeAlpha
}

""""""
type AuthorizationExpiredEvent implements TransactionStatusEvent {
  """"""
  status: TransactionStatus

  """"""
  timestamp: Timestamp

  """"""
  amount: MonetaryAmount

  """"""
  source: TransactionSource

  """"""
  terminal: Boolean
}

""""""
type AuthorizedEvent implements TransactionStatusEvent {
  """"""
  status: TransactionStatus

  """"""
  timestamp: Timestamp

  """"""
  amount: MonetaryAmount

  """"""
  source: TransactionSource

  """"""
  processorResponse: TransactionAuthorizationProcessorResponse

  """"""
  riskDecision: RiskDecision

  """"""
  terminal: Boolean
}

""""""
type FailedEvent implements TransactionStatusEvent {
  """"""
  status: TransactionStatus

  """"""
  timestamp: Timestamp

  """"""
  amount: MonetaryAmount

  """"""
  source: TransactionSource

  """"""
  processorResponse: TransactionAuthorizationProcessorResponse

  """"""
  riskDecision: RiskDecision

  """"""
  terminal: Boolean
}

""""""
type GatewayRejectedEvent implements TransactionStatusEvent {
  """"""
  status: TransactionStatus

  """"""
  timestamp: Timestamp

  """"""
  amount: MonetaryAmount

  """"""
  source: TransactionSource

  """"""
  gatewayRejectionReason: GatewayRejectionReason

  """"""
  processorResponse: TransactionAuthorizationProcessorResponse

  """"""
  riskDecision: RiskDecision

  """"""
  terminal: Boolean

  """"""
  duplicateOf: Transaction @complexity(amount: 10)
}

""""""
type ProcessorDeclinedEvent implements TransactionStatusEvent {
  """"""
  status: TransactionStatus

  """"""
  timestamp: Timestamp

  """"""
  amount: MonetaryAmount

  """"""
  source: TransactionSource

  """"""
  declineType: ProcessorDeclineType

  """"""
  processorResponse: TransactionAuthorizationProcessorResponse

  """"""
  riskDecision: RiskDecision

  """"""
  terminal: Boolean
}

""""""
type SettledEvent implements TransactionStatusEvent {
  """"""
  status: TransactionStatus

  """"""
  timestamp: Timestamp

  """"""
  amount: MonetaryAmount

  """"""
  source: TransactionSource

  """"""
  processorResponse: TransactionSettlementProcessorResponse

  """"""
  terminal: Boolean
}

""""""
type SettlementDeclinedEvent implements TransactionStatusEvent {
  """"""
  status: TransactionStatus

  """"""
  timestamp: Timestamp

  """"""
  amount: MonetaryAmount

  """"""
  source: TransactionSource

  """"""
  processorResponse: TransactionSettlementProcessorResponse

  """"""
  terminal: Boolean
}

""""""
type SettlementPendingEvent implements TransactionStatusEvent {
  """"""
  status: TransactionStatus

  """"""
  timestamp: Timestamp

  """"""
  amount: MonetaryAmount

  """"""
  source: TransactionSource

  """"""
  processorResponse: TransactionSettlementProcessorResponse

  """"""
  terminal: Boolean
}

""""""
type SettlingEvent implements TransactionStatusEvent {
  """"""
  status: TransactionStatus

  """"""
  timestamp: Timestamp

  """"""
  amount: MonetaryAmount

  """"""
  source: TransactionSource

  """"""
  terminal: Boolean
}

""""""
type SubmittedForSettlementEvent implements TransactionStatusEvent {
  """"""
  status: TransactionStatus

  """"""
  timestamp: Timestamp

  """"""
  amount: MonetaryAmount

  """"""
  source: TransactionSource

  """"""
  terminal: Boolean
}

""""""
type VoidedEvent implements TransactionStatusEvent {
  """"""
  status: TransactionStatus

  """"""
  timestamp: Timestamp

  """"""
  amount: MonetaryAmount

  """"""
  source: TransactionSource

  """"""
  terminal: Boolean
}

""""""
type Search {
  """"""
  transactions(input: TransactionSearchInput!, first: Int, after: String): TransactionConnection @complexity(amount: 20)

  """"""
  refunds(input: RefundSearchInput!, first: Int, after: String): RefundConnection @complexity(amount: 20)

  """"""
  disputes(input: DisputeSearchInput!, first: Int, after: String): DisputeConnection @complexity(amount: 10)

  """"""
  verifications(input: VerificationSearchInput!, first: Int, after: String): VerificationConnection @complexity(amount: 20)

  """"""
  customers(input: CustomerSearchInput!, first: Int, after: String): CustomerConnection @complexity(amount: 20)
}

""""""
type TransactionConnection {
  """"""
  edges: [TransactionConnectionEdge],

  """"""
  pageInfo: PageInfo!
}

""""""
type TransactionConnectionEdge {
  """"""
  cursor: String

  """"""
  node: Transaction
}

""""""
type RefundConnection {
  """"""
  edges: [RefundConnectionEdge],

  """"""
  pageInfo: PageInfo!
}

""""""
type RefundConnectionEdge {
  """"""
  cursor: String

  """"""
  node: Refund
}

""""""
type DisputeConnection {
  """"""
  edges: [DisputeConnectionEdge],

  """"""
  pageInfo: PageInfo!
}

""""""
type DisputeConnectionEdge {
  """"""
  cursor: String

  """"""
  node: Dispute
}

""""""
type CustomerConnection {
  """"""
  edges: [CustomerConnectionEdge],

  """"""
  pageInfo: PageInfo!
}

""""""
type CustomerConnectionEdge {
  """"""
  cursor: String

  """"""
  node: Customer
}

""""""
type PageInfo {
  """"""
  hasNextPage: Boolean!

  """"""
  hasPreviousPage: Boolean!

  """"""
  startCursor: String

  """"""
  endCursor: String
}

""""""
type Verification implements Node {
  """"""
  id: ID!

  """"""
  legacyId: ID!

  """"""
  paymentMethodSnapshot: PaymentMethodSnapshot

  """"""
  paymentMethod: PaymentMethod @complexity(amount: 10)

  """"""
  amount: MonetaryAmount @deprecated(reason: "Depending on the type of payment method being verified, some verifications do not have an amount. On a credit card verification, use `paymentMethodVerificationDetails.amount` instead.")

  """"""
  merchantAccountId: ID

  """"""
  status: VerificationStatus

  """"""
  processorResponse: VerificationProcessorResponse

  """"""
  createdAt: Timestamp

  """"""
  gatewayRejectionReason: GatewayRejectionReason

  """"""
  riskData: RiskData

  """"""
  paymentMethodVerificationDetails: VerificationDetails
}

""""""
type VerificationProcessorResponse {
  """"""
  legacyCode: String

  """"""
  message: String

  """"""
  cvvResponse: AvsCvvResponseCode

  """"""
  avsPostalCodeResponse: AvsCvvResponseCode

  """"""
  avsStreetAddressResponse: AvsCvvResponseCode
}

""""""
type CreateCustomerPayload {
  """An identifier used to reconcile requests and responses. Making an edit here."""
  clientMutationId: String

  """"""
  customer: Customer
}

""""""
type UpdateCustomerPayload {
  """An identifier used to reconcile requests and responses. Making an edit here."""
  clientMutationId: String

  """"""
  customer: Customer
}

""""""
type Customer implements Node {
  """"""
  id: ID!

  """"""
  legacyId: ID!

  """"""
  company: String

  """"""
  createdAt: Timestamp

  """"""
  customFields: [CustomField!]

  """"""
  defaultPaymentMethod: PaymentMethod

  """"""
  email: String

  """Customer's first name."""
  firstName: String

  """Customer's last name."""
  lastName: String

  """"""
  phoneNumber: String

  """"""
  paymentMethods(first: Int, after: String): PaymentMethodConnection

  """"""
  transactions(first: Int, after: String): TransactionConnection @complexity(amount:20)
}

""""""
type PaymentMethodConnection {
  """"""
  edges: [PaymentMethodConnectionEdge],

  """"""
  pageInfo: PageInfo!
}

""""""
type PaymentMethodConnectionEdge {
  """"""
  cursor: String

  """"""
  node: PaymentMethod
}

""""""
type AuthenticationInsight {
  """"""
  merchantAccountId: String

  """"""
  customerAuthenticationRegulationEnvironment: CustomerAuthenticationRegulationEnvironment
}

""""""
type UsBankAccountVerificationDetails {
  """"""
  method: UsBankAccountVerificationMethod

  """"""
  verificationDeterminedAt: Timestamp
}

""""""
type CreditCardVerificationDetails {
  """"""
  amount: MonetaryAmount
}

""""""
type ThreeDSecureAuthentication {
  """"""
  cavv: String

  """"""
  directoryServerTransactionId: String

  """"""
  eciFlag: ECommerceIndicator

  """"""
  liabilityShifted: Boolean

  """"""
  liabilityShiftPossible: Boolean

  """"""
  cardEnrolled: ThreeDSecureCardEnrolled

  """"""
  authenticationStatus: ThreeDSecureAuthenticationStatus

  """"""
  version: String

  """"""
  xId: String

  """"""
  threeDSecureServerTransactionId: String

  """"""
  acsTransactionId: String

  """"""
  paresStatus: ThreeDSecureAuthenticationStatusIndicator

  """"""
  transactionStatus: ThreeDSecureAuthenticationStatusIndicator

  """"""
  transactionStatusReason: String
}

""""""
type PerformThreeDSecureLookupPayload {
  """An identifier used to reconcile requests and responses. Making an edit here."""
  clientMutationId: String

  """"""
  threeDSecureLookupData: ThreeDSecureLookupData

  """"""
  paymentMethod: PaymentMethod
}

""""""
type ThreeDSecureLookupData {
  """"""
  acsUrl: String

  """"""
  authenticationId: String

  """"""
  version: String

  """"""
  pareq: String

  """"""
  md: String

  """"""
  termUrl: String
}

""""""
type Dispute implements Node {
  """"""
  id: ID!

  """"""
  legacyId: ID!

  """"""
  amountDisputed: MonetaryAmount

  """"""
  amountWon: MonetaryAmount

  """"""
  caseNumber: String

  """"""
  createdAt: Timestamp

  """"""
  receivedDate: Date

  """"""
  referenceNumber: String

  """"""
  responseDeadline: Timestamp

  """"""
  replyByDate: Date

  """"""
  processorReplyByDate: Date @hidden

  """"""
  type: DisputeType

  """"""
  evidence: [DisputeEvidence!]

  """"""
  originalDispute: Dispute @complexity(amount: 10)

  """"""
  processorResponse: DisputeProcessorResponse

  """"""
  status: DisputeStatus

  """"""
  statusHistory: [DisputeStatusEvent!]

  """"""
  transaction: Transaction @complexity(amount: 10)
}

""""""
type DisputeProcessorResponse {
  """"""
  processorComments: String

  """"""
  reason: DisputeReason

  """"""
  reasonCode: String

  """"""
  reasonDescription: String

  """"""
  receivedDate: Date

  """"""
  referenceNumber: String
}

""""""
type DisputeFileEvidence implements DisputeEvidence {
  """"""
  id: ID!

  """"""
  legacyId: ID!

  """"""
  createdAt: Timestamp

  """"""
  sentToProcessorAt: Timestamp

  """"""
  url: String

  """"""
  category: String
}

""""""
type DisputeTextEvidence implements DisputeEvidence {
  """"""
  id: ID!

  """"""
  legacyId: ID!

  """"""
  createdAt: Timestamp

  """"""
  sentToProcessorAt: Timestamp

  """"""
  comment: String

  """"""
  category: String
}

""""""
type DisputeStatusEvent {
  """"""
  disbursementDate: Date

  """"""
  status: DisputeStatus

  """"""
  timestamp: Timestamp

  """"""
  effectiveDate: Date
}

""""""
type SubmitCreditCardForAccountUpdaterPayload @hidden {
  """An identifier used to reconcile requests and responses. Making an edit here."""
  clientMutationId: String

  """"""
  paymentMethod: PaymentMethod
}

""""""
type AcceptDisputePayload {
  """An identifier used to reconcile requests and responses. Making an edit here."""
  clientMutationId: String

  """"""
  dispute: Dispute
}

""""""
type VaultPayPalBillingAgreementPayload {
  """An identifier used to reconcile requests and responses. Making an edit here."""
  clientMutationId: String

  """"""
  paymentMethod: PaymentMethod
}